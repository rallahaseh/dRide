{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "OWNER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "RENTER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "brand",
						"type": "bytes32"
					},
					{
						"internalType": "enum Rental.CarType",
						"name": "carType",
						"type": "uint8"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "latitude",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "longitude",
								"type": "string"
							}
						],
						"internalType": "struct Rental.Coordinate",
						"name": "location",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "model",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "image",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "rentCost",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "insuranceDeposit",
						"type": "uint256"
					}
				],
				"name": "addCar",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "addOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "addRenter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "carCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "cars",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "brand",
						"type": "bytes32"
					},
					{
						"internalType": "enum Rental.CarType",
						"name": "carType",
						"type": "uint8"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "latitude",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "longitude",
								"type": "string"
							}
						],
						"internalType": "struct Rental.Coordinate",
						"name": "location",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "model",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "image",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "rentCost",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "insuranceDeposit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"internalType": "enum Rental.CarStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "getCarByID",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "brand",
						"type": "bytes32"
					},
					{
						"internalType": "enum Rental.CarType",
						"name": "carType",
						"type": "uint8"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "latitude",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "longitude",
								"type": "string"
							}
						],
						"internalType": "struct Rental.Coordinate",
						"name": "location",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "model",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "image",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "rentCost",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "insuranceDeposit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"internalType": "enum Rental.CarStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getRoleMember",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleMemberCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "isRenter",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "removeOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "removeRenter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceRenter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addCar(bytes32,bytes32,uint8,(string,string),uint256,bytes32,uint256,uint256)": {
					"details": "The following function will be used to add Cars. Modifiers:  - Restricted to members of the owner role.  - Should not exist."
				},
				"addOwner(address)": {
					"details": "Add an account to the owner role. Restricted to proposals."
				},
				"addRenter(address)": {
					"details": "Add an account to the renter role. Restricted to proposals."
				},
				"getRoleMember(bytes32,uint256)": {
					"details": "This function will return one of the accounts that contain the 'role' attribute.  The value of the 'index' variable must be between 0 and getRoleMemberCount, excluding both numbers. There is no specific order to the people who hold roles, and the sequence in  which they appear might shift at any time. WARNING:  You need to make sure that all of your queries are performed on the same block  when you are using {getRoleMember} and {getRoleMemberCount}. For more information, take a look at the following: https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]"
				},
				"getRoleMemberCount(bytes32)": {
					"details": "This function returns the total number of accounts that contain the 'role' attribute. It is possible to enumerate all bearers of a role by using this method in conjunction with  the getRoleMember method."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"isOwner(address)": {
					"details": "Return `true` if the account belongs to the owner role."
				},
				"isRenter(address)": {
					"details": "Return `true` if the account belongs to the renter role."
				},
				"removeOwner(address)": {
					"details": "Remove an account from the owner role. Restricted to proposals."
				},
				"removeRenter(address)": {
					"details": "Remove an account from the renter role. Restricted to proposals."
				},
				"renounceOwner()": {
					"details": "Remove oneself from the leader role."
				},
				"renounceRenter()": {
					"details": "Remove oneself from the renter role."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"carCount()": {
					"notice": "Variables"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Rental.sol": "Rental"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
			"keccak256": "0x1b8ac5ffdb80c20c9188267455197d9dcfeef46379aeb1b3a6cc622e879895ad",
			"license": "MIT",
			"urls": [
				"bzz-raw://5e531d0792e4774e2edabb34a5bed8e96ac80a84e08ebd5ebf7a0d15185e4f37",
				"dweb:/ipfs/QmPwWjhL1phGiGfP5R8Kzp3bQuVigkornTcSy9KaQnou1E"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://d4831d777a29ebdf9f2caecd70e74b97bff1b70e53622fd0a02aed01e21c8271",
				"dweb:/ipfs/QmUqurVVnCc7XkMxb2k23TVQUtuhHZduJ3hTZarTJrqU24"
			]
		},
		"contracts/Access.sol": {
			"keccak256": "0x45d905cc4fe4e11043e3d93a18c2dd1b0528e506c6284b1fe989b5a32d09d9ae",
			"license": "MIT",
			"urls": [
				"bzz-raw://475e26a45c39f2e0b006159fbbdb889beed33b4c7634e6cc7c55dcb608f2f90c",
				"dweb:/ipfs/QmS2m1SCPBURRY1xPphVN1pgbGFL4zWwNWC8RSnQM5X54e"
			]
		},
		"contracts/Rental.sol": {
			"keccak256": "0x98b816895f72fe6bc8067ad84ff4ee2909bb07c54f4eebbddca44b5920ed33c8",
			"license": "MIT",
			"urls": [
				"bzz-raw://8fd674d0abc485c7de26ff26876dc8eea72eb571cfd2d12ee8ac09f2d3e84f7d",
				"dweb:/ipfs/QmZUoQV1RJaQg1oKDahhW1crUM5MXumcdH5nmvpLpUFBSB"
			]
		},
		"contracts/utils/AccessControl.sol": {
			"keccak256": "0xa5893ba9c0f2af8da3f1e7f03a84a1165e864becac46b8e9b74aaaa550b82be6",
			"license": "MIT",
			"urls": [
				"bzz-raw://32bc73a084c521c25ccf07f451dcbc6aa9707b59cd7dff7164afaab6aa53a1f0",
				"dweb:/ipfs/QmWGveVucaET9QgFJYnKUU2irhBNpNdrJ82v66fcgAkSKi"
			]
		},
		"contracts/utils/Context.sol": {
			"keccak256": "0x51faf7c505ab0e60ff53dd336f550d8487b7d7c112b8d07cd1051ae4d3a6a3aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://dfd86c7bf611ca2a1243cb6a1ab668113d11b3b012228dd228a803da0fc779e7",
				"dweb:/ipfs/QmYTmQNsMBRQbMBgmfbFWf3Ve4aXmYqjSWDjkjvSLeHr6t"
			]
		}
	},
	"version": 1
}